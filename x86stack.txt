    15: 	myfunc(1, 2);
012F175E 6A 02                push        2  
012F1760 6A 01                push        1  
012F1762 E8 C1 F8 FF FF       call        myfunc (012F1028h)  
012F1767 83 C4 08             add         esp,8  

     9: int myfunc(int a, int b) {
012F1700 55                   push        ebp  
012F1701 8B EC                mov         ebp,esp  
012F1703 81 EC C0 00 00 00    sub         esp,0C0h  
012F1709 53                   push        ebx  
012F170A 56                   push        esi  
012F170B 57                   push        edi  
012F170C 8D BD 40 FF FF FF    lea         edi,[ebp-0C0h]  
012F1712 B9 30 00 00 00       mov         ecx,30h  
012F1717 B8 CC CC CC CC       mov         eax,0CCCCCCCCh  
012F171C F3 AB                rep stos    dword ptr es:[edi]  
    10: 	return a + b;
012F171E 8B 45 08             mov         eax,dword ptr [a]  
012F1721 03 45 0C             add         eax,dword ptr [b]  
    11: }
012F1724 5F                   pop         edi  
012F1725 5E                   pop         esi  
012F1726 5B                   pop         ebx  
012F1727 8B E5                mov         esp,ebp  
012F1729 5D                   pop         ebp  
012F172A C3                   ret  

ALL OF THESE CHANGE ESP
push = pushes value from register onto stack, decreases esp by sizeof() bytes
pop = pops value from stack into register, increases esp by sizeof() bytes
ret = Transfers program control to a return address located on the top of the stack (into eip)
call = transfers eip onto stack and calls function (eip = new address). 
-------------------

var1 --> ESP
var2
var3 --> EBP
etc

CALL

rp --> ESP
var1
var2
var3 --> EBP
etc

PUSH EBP

EBP_old --> ESP
rp 
var1
var2
var3 --> EBP
etc

MOV EBP, ESP

EBP_old --> ESP, EBP
rp 
var1
var2
var3 
etc


---------


POP EBP

rp --> ESP
var1
var2
var3 --> EBP
etc

RET

var1 --> ESP
var2
var3 --> EBP
etc